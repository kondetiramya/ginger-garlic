name: Run on main

on:
  push:
    branches: [ main ]
env:
  IMAGE_NAME: ginger-garlic
  GHCR_ROOT: ghcr.io
  GHCR: ghcr.io/kondetiramya

jobs:
  deploy-dev:
    environment: dev
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Test
      run: dotnet test --no-build --verbosity normal
    
    - name: Install Gitversion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'
    
    - name: Generate Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: ./gitversion.yaml
        updateAssemblyInfo: true
    
    - name: Login to GitHub Container Registry
      env:
        VERSION: steps.gitversion.outputs.nuGetVersionV2
      uses: docker/login-action@v1
      with:
        registry: ${{ env.GHCR_ROOT }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build tagged docker image
      env: 
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      run: |
        echo Building docker image with version: $VERSION
        docker build . --file Dockerfile -t "${{ env.GHCR }}/${{ env.IMAGE_NAME }}:$VERSION"
    
    - name: Push tagged docker image to GHCR
      env:
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      run: |
        echo Pushing docker image with version: $VERSION
        docker push ${{ env.GHCR }}/${{ env.IMAGE_NAME }}:$VERSION
    
    - name: Tag the commit
      if: ${{ success() }}
      env:
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      uses: actions/github-script@v3
      with:
        script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/d${ env.VERSION }',
              sha: context.sha
            }
            try
            {
                github.git.createRef(request)        
            }catch(err){
                core.setFailed('Request failed with error ${err}')
            }        
  
  deploy-staging:
    environment: staging
    runs-on: ubuntu-latest
    needs:
    - deploy-dev
    outputs:
        releaseId: ${{ steps.create-pre-release.outputs.id}}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Test
      run: dotnet test --no-build --verbosity normal
    
    - name: Install Gitversion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'
    
    - name: Generate Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: ./gitversion.yaml
        updateAssemblyInfo: true
    
    - name: Login to GitHub Container Registry
      env:
        VERSION: steps.gitversion.outputs.nuGetVersionV2
      uses: docker/login-action@v1
      with:
        registry: ${{ env.GHCR_ROOT }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build tagged docker image
      env: 
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      run: |
        echo Building docker image with version: $VERSION
        docker build . --file Dockerfile -t "${{ env.GHCR }}/${{ env.IMAGE_NAME }}:$VERSION"
    
    - name: Push tagged docker image to GHCR
      env:
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      run: |
        echo Pushing docker image with version: $VERSION
        docker push ${{ env.GHCR }}/${{ env.IMAGE_NAME }}:$VERSION
        
    # - name: Generate changelog
      # uses: scottbrenner/generate-changelog-action@master
      # id: changelog
      # with:
        # package-dir: ./package.json
        # from-tag: ${{ steps.latest_tag.options.tag }}
        # to-tag: HEAD
        # exclude: ci,build,test,docs,chore
    
    # - name: Create pre-release
      # id: create-pre-release
      # if: ${{ success() }}
      # uses: ncipollo/release-action@v1
      # env:
        # VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      # with:
        # token: ${{ secrets.GITHUB_TOKEN }}
        # tag: ${{ env.VERSION }}
        # name: Release V ${{ env.VERSION }}
        # draft: true
        # prerelease: false
        # body: |
            # ${{ steps.changelog.outputs.changelog }}
    # - name: Create pre-release
      # id: create-pre-release
      # if: ${{ success() && env.isMain == ''}}
      # uses: actions/create-release@v1
      # env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      # with:
        # tag_name: ${{ env.VERSION }}
        # release_name: Release V ${{ env.VERSION }}
        # draft: true
        # prerelease: false
        # body: |
            # ${{ steps.changelog.outputs.changelog }}
    - name: Tag the commit
      if: ${{ success() }}
      env:
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      uses: actions/github-script@v3
      with:
        script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/s${ env.VERSION }',
              sha: context.sha
            }
            try
            {
                github.git.createRef(request)        
            }catch(err){
                core.setFailed('Request failed with error ${err}')
            }
  
  deploy-prod:
    environment: prod
    runs-on: ubuntu-latest
    needs:
    - deploy-dev
    - deploy-staging

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Test
      run: dotnet test --no-build --verbosity normal
    
    - name: Install Gitversion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'
    
    - name: Generate Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: ./gitversion.yaml
        updateAssemblyInfo: true
    
    - name: Login to GitHub Container Registry
      env:
        VERSION: steps.gitversion.outputs.nuGetVersionV2
      uses: docker/login-action@v1
      with:
        registry: ${{ env.GHCR_ROOT }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build tagged docker image
      env: 
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      run: |
        echo Building docker image with version: $VERSION
        docker build . --file Dockerfile -t "${{ env.GHCR }}/${{ env.IMAGE_NAME }}:$VERSION"
    
    - name: Push tagged docker image to GHCR
      env:
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      run: |
        echo Pushing docker image with version: $VERSION
        docker push ${{ env.GHCR }}/${{ env.IMAGE_NAME }}:$VERSION
        
    # - name: Publish release
      # if: ${{ success() }}
      # env:
         # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # uses: eregon/publish-release@v1
      # with:
        # release_id: ${{ needs.deploy-staging.outputs.releaseId }}
    
    - name: Generate changelog
      if: ${{ success() }}
      uses: scottbrenner/generate-changelog-action@master
      id: changelog
      with:
        package-dir: ./package.json
        from-tag: ${{ steps.latest_tag.options.tag }}
        to-tag: HEAD
        exclude: ci,build,test,docs,chore
        
    - name: Create Release
      if: ${{ success() }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      with:
        tag_name: p${{ env.VERSION }}
        release_name: Release V ${{ env.VERSION }}
        draft: false
        body: |
            ${{ steps.changelog.outputs.changelog }}
